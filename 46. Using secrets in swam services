1) So in this lecture we are going to practically se how we can use secrets with the swarm service command line.
2) So again we have our 3-node swarm cluster : node1 (manager-leader), node2 and node3 (manager-reachable)
3) So lets go inside the node1, and inside that node1 under /home/docker directory we are going to create a text file containing our username
    and that will act as our first secret.
    Note: you can find the same file on our workstation in our working directory 
        secrets-sample-1/psql_user.txt 
4) So this way of creating the file containing our secret is the first way of creating the secret in swarm. second way is to pass in the 
    secret while creating it on the "docker secret create" command which we will see next.
5) so for now lets use first the file we have just created containing our secret:
    on node1:/home/docker
    # vi psql_user.txt
        brDSLsd 
    # docker secret create psql_user psql_user.txt
        So in this we are giving the name of the secret same as that of the file, but could different as well.
        and this command also will spit out the unique ID like for other docker objects.
6) Now lets other way of passing the secret on the command line and echo it in the secret creation command
    again on node1:
    # echo "brDSLsd" | docker secret create psql_pass -
        Note the "-" at the end of command, it tell the command to read the password from standard input which is our echo command
7) So this is how we can generate secrets with the help of above two methods, but both of these two methods have potential threats.
    a) in first one we are storing the secret on a file on host machine. 
    b) in second one we are passing the secret right into the command.
8) Now we could check out the secrets available on our swarm node using below command
    # docker secret ls 
        ID                          NAME                DRIVER              CREATED             UPDATED
        m23drhzvfdpadcw4m2m1yp65y   psql_pass                               8 seconds ago       8 seconds ago
        bkusaf0uzr6ahnb3plo1tzwmm   psql_user                               18 hours ago        18 hours ago
9) We could also inspect these secrets using docker secret inspect command, but that command is not going to give us the secret.
10) The only one who is going to access this secret is the container and the service it is assigned to.
11) now let's create a new service manually(not using swarm stack) and try to add secrets to that command
    # docker service create --name psql --secret psql_user --secret psql_pass -e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass -e POSTGRES_USER_FILE=/run/secrets/psql_user POSTGRES_PASSWORD_FILE
        So from the above command couple of points to note down:
        a) here we have passed the secrets we have created above using docker secret create command in the service create command itself.
        b) then we are using another new pair of environment variable which are again given by the official image builder of postgres image, 
            which are going to tell the container, the location of these secrets and how to use them as password and username.
        c) This command is going to issue a scheduling request for a new container, its going to create one postgres database task/container,
            and its going to pass these environment variables for the location of those two secrets and then its going to map in a tmp_fs those
            secret files.
12) So lets check out the service we have created
    # docker service ls
        ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
        2vv2l6vsi1p7        psql                replicated          1/1                 postgres:latest
    # docker service ps psql
        ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
        1z9ca6ccqgcx        psql.1              postgres:latest     node2               Running             Running 17 seconds ago
    So we can clearly see that one task is created for this service as we have mentioned single replica to be created and that task/container
    is running on node2 of our 3-node-swarm cluster.
13) So let's go to node2 and check out the container running over there for this new postgres service, we just spun up.
    node2:
    # docker container ls
        CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
        83a347b868ec        postgres:latest     "docker-entrypoint.sâ€¦"   2 minutes ago       Up 2 minutes        5432/tcp            psql.1.1z9ca6ccqgcx2kxptzjkl7igt
    Now lets try to login to this container and try to see whether we could see the secret we have created for the service of this container
    # docker container exec -it psql.1.1z9ca6ccqgcx2kxptzjkl7igt bash 
        root@83a347b868ec:/# cd /run/secrets/
        root@83a347b868ec:/run/secrets# ls
            psql_pass  psql_user
    So we can see that this container has access to those secrets which we have created and this is only possible for this container and not 
    any other because this container is a part of service which has access to those secrets.
14) Now let's checkout some more commands which can be used to remove or add these secrets from the services.
    # docker service update --help
        --secret-add secret                  Add or update a secret on a service
        --secret-rm list                     Remove a secret
    So let's try to update our service by removing one of the secrets which will be username
    # docker service update --secret-rm psql_user psql
        but note that since these secrets are given to the immutable containers by these services and updating them on a service does not mean
        that they will be updated on container as well, instead that container will be replaced by the new. So basically service is going to
        redeploy the container after getting updated
        which can be seen in the below command
    # docker service ps psql
        but if we check this command, we will notice that new container is not able to come up, and service is again and again trying to
        deploy a new one. The reason is that since we have started the serivce by giving the environment variable and now we are not 
        filling the value of that by removing the secret, hence it will again and again run into errors and will not start
        So to overcome this we are again going to add the secret back to this service
    # docker service update --secret-add psql_user psql
    # docker service ps psql
        ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR                       PORTS
        th89a396bj75        psql.1              postgres:latest     node2               Running             Running 24 seconds ago
        d5guc0xpa01s         \_ psql.1          postgres:latest     node2               Shutdown            Shutdown 25 seconds ago
        xjpp863pv1br         \_ psql.1          postgres:latest     node3               Shutdown            Failed 27 seconds ago     "task: non-zero exit (1)"
        uwv4jgig50ct         \_ psql.1          postgres:latest     node1               Shutdown            Failed 34 seconds ago     "task: non-zero exit (1)"
        apl9f5v46jjl         \_ psql.1          postgres:latest     node2               Shutdown            Failed 41 seconds ago     "task: non-zero exit (1)"
    So finally the new container is started after many retried during the time we have removed the secret.
15) and lastly we have to remove the service for our next example manually as we have used the service create
    command
    # docker service rm psql 
16) Also we have to manually remove the secrets which we have created
    # docker secret rm psql_user
    # docker secret rm psql_pass
    