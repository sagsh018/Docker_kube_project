version: "3" # Note that for stack yml file least version is 3

services:
  redis:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - frontend
    deploy: # This is new here in stack compose files
      replicas: 1
      update_config: # when service gets updated, how will it happen on replicas
        parallelism: 2
        delay: 10s # so here update will happen in parallen for 2 at a time with 10s delay
      restart_policy:
        condition: on-failure # task will restart on failure
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend 
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    deploy:
      placement:
        constraints: [node.role == manager] # This will put db service only on node where role is manager
  vote:
    image: bretfisher/examplevotingapp_vote
    ports:
      - "5000:80"
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: bretfisher/examplevotingapp_result
    ports:
      - "50001:80"
    networks:
      - backend
    depends_on:
      - db 
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  worker:
    image: bretfisher/examplevotingapp_worker:java
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING] # to add label to that service
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3 # maximum restart will be 3 not after that.
        window: 120s
      placement:
        constraints: [node.role == manager]
  visualizer: # This is visualization of all services running on web.
    image: dockersamples/visualizer
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s # most probable the refresh time
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data: