1) In this lecture we are going to look at how we can use secrets for our local development. i.e. with our local docker-compose.yml file.
2) So Let's turn off our 3 node swarm cluster (node1, node2, node3) and let's get back to our local "default" docker machine
3) Here we will also disable the swarm, which we created for single node swarm :
    # docker swarm leave --force.
4) Now lets get back to the same directory : secrets-sample-2/
    Which contain the same stack compose file which we have used in 3-node-swarm cluster in order to spin up the psql service by putting
    user name and password for that psql database as secrets.
5) But notice that in case of swarm we have Raft database where the secrets where stored and encrypted on disk and encrypted in transition
    from manager to worker node via plane and then also encrypted on worker nodes and only given down to the containers which part of 
    services having access to these secrets,
6) but here in case of local development we don't have raft database and we don;t have any encryption. So let's verify if these secrets 
    work in local development or not.
7) So for this verification we are going to make use of the same stack compose file, having secrets written in that under 
    secrets-sample-2/ directory. Also we have two text files named "psql_password.txt" and "psql_user.txt" which we have used to generate the
    secret at the time of stack deploy.
8) So let's go into that directory:
    # cd secrets-sample-2/
    Now lets try to bring up the container using same compose file used on swarm
    # docker-compose up -d 
        But this is trowing error on windows for docker toolbox and we won;t be able to test it here. So let's launch one of our linux
        VM and test it there
    # tar -cvf secrets-sample-2.tar secrets-sample-2
    # scp -p secrets-sample-2.tar root@docker.local:/tmp
    # ssh root@docker.local
    [root@docker ~]# cd /tmp
    [root@docker ~]# mv secrets-sample-2.tar /home/sharmasag
    [root@docker ~]# cd /home/sharmasag
    [root@docker sharmasag]# tar -xvf secrets-sample-2.tar
    [root@docker sharmasag]# chown sharmasag:sharmasag secrets-sample-2 -R
    [root@docker sharmasag]# sudo su - sharmasag
    [sharmasag@docker ~]$ cd secrets-sample-2/
    [sharmasag@docker secrets-sample-2]$ docker-compose up -d 
    [sharmasag@docker secrets-sample-2]$ docker container ls 
        CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
        605c50c9b808        postgres            "docker-entrypoint.sâ€¦"   6 seconds ago       Up 4 seconds        5432/tcp            secrets-sample-2_psql_1
    Now let's try to check by loging inside the container whether the secret is pushed inside it or not
    [sharmasag@docker secrets-sample-2]$ docker container exec -it 605c50c9b808 bash
    root@605c50c9b808:/# cat /run/secrets/psql_user
        dbuser
    root@605c50c9b808:/# exit
    [sharmasag@docker secrets-sample-2]$
    So we can see that even with the help of local decker-compose development and building up we can push the secret to the required containers
9) So in the above process we are able to push the secret to the container even though we don't have swarm running and we don't even have
    raft database locally.
10) So what just happened in the background is that docker has created a bind mount of the local secret files to the container under the 
    specified location and this is how at the run time docker compose has pushed the secrets to container.
11) But not that we don;t have raft DB and hence not encryption and hence this is not at all secure, but yes this is a workaround of using the
    the same setup locally for development which we would like to use in production.
12) Note that in local compose we could only make use of secrets based on files 
    secrets:
      psql_user:
        file: ./psql_user.txt
      psql_password:
        file: ./psql_password.txt
    and not as external.


