1) So in docker version 1.13 and onwards there was a new feature implemented, "Secrets Storage"
2) This turned out to be the easiest "secure" solution for storing secrets in swarm, becuase it is built into swarm, comes out of the box
    with swarm and nothing is required to use it.
3) So if you docker version 1.13 or newer and you have initialized swarm then you got secrets storage by default
4) These secrets in swarm are designed from the ground up to be encrypted on disk, to be encrypted in transit and to only be available in the
    places it need to be.
5) So what is a secret? -- Anything that you don't want on the front page of the newspaper. So it could be any thing from the below listed:
    a) Username or password
    b) TLS certificates and the keys to that
    c) SSH keys
    d) Twiter API keys
    e) Amazon login secret keys
    f) and anything that will allow connectivity to something should be counted as secret.
6) So in swarm secret storage supports generic strings or binary content upto 500KB in size.
7) And we don't have to rewrite our already written apps in order to make use of secrets in them, and we don't have to have our apps talk to 
    webservices somewhere else in order to get these.
8) As of docker 1.13.0 swarm raft DB is encrypted on disk by default. So if you install docker version 1.13.0 and do swarm init, thats the 
    encrypted DB by default.
9) When swarm shut down the service, its encrypted with the keys stored securely only on the disk of manager nodes. and manager nodes are the
    only ones who have these keys to unlock or decrypt them.
10) Basically the way that keys get down to the containers is through the control plane or the encrypted TLS network communication between
    managers and the workers, and this connection is already secured using TLS and mutual PKI authentication. So it is a great way to use that
    existing channel(control Plane) for bringing these secrets down to containers.
11) So first we put them in the swarm database using docker secret command and then we assign them to services in the service command themself
    or using the stack file, and tell swarm who/which service is allowed to use these secrets.
12) and only the containers in those services which are allowed to use these secrets, can see them and not all the containers. Since these 
    secrets are internally embedded in the docker swarm finctionality, after workers receive them through the encrypted control plane channels,
    they keep them save on there disk and only give down to the container if they are part of the services which are allowed to access those
    secrets.
13) So these secrets look like the files in containers but are actually in-memory fs. You can see them inside container in below path
    /run/secrets/<secret_name> or
    /run/secrets/<secret_alias>
    note these secret_name or secret_alias are the names of the files on container and when we try to access them, there is a single secret
    present in them. So you can also see them as key-value pair where key is the name of file and value is the secret inside that file.
    We can also setup aliases, so one key can have multiple aliases.
14) Now suppose you are in local-development mode using docker-compose and trying to make use of the stack file which has secrets assigned to
    services in that will actually work in docker-compse as well on your local machine. So here docker-compose would be able to make
    use of those secrets but only by mounting them in some local file on the developer workstation because there will be no swarm.
    Now this will be not secure as that of swarm and the reason is when secrets stored in swarm raft database, they are encrypted there but
    in case of local docker-compose they will not be encrypted.
    Hence we can say docker-compose will just fake out the secrets.
15) This proves that secrets is completely a docker swarm thing and are not ment for local development using docker-compose, however 
    docker-compose does have a workaround for it.

