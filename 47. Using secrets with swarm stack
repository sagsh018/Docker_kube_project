1) So in this lecture we are going to see how we can make use of the secrets with swarm stacks.
2) So on our local workstation we have a directory :
    secrets-sample-2/
    which has docker-compose.yml stack file, along with psql_password.txt and psql_user.txt 
3) So these password and user file are same as that of the text files we have created in previous example under secrets-sample-1/ and used them
    to create secrets and assign those secrets to service using service create command.
4) But over here in this example, we are going to write all the configuration in the compose file and try to build our environment using
    docker stack deploy command.
5) So let's examine our compose file first:
    a) version used here for compose file is 3.1 because for using swarm stack we need atleast 3 and for using secrets inside stack we need
        atleast 3.1 or above.
    b) Another thing to notice here is the root level secrets key as mentioned below
        =============================
        secrets:
          psql_user:
            file: ./psql_user.txt
          psql_password:
            file: ./psql_password.txt
        =============================
        So here we are mentioning the name of the text file and when we will build this stack these secrets will be created by the swarm at that
        time only and then they will be assigned to the services using the secrets key inside the services key.
            secrets:
              - psql_user
              - psql_password
    c) There is another method as well for defining the secrets:
        =============================
        secrets:
          psql_user:
            file: ./psql_user.txt
          psql_password:
            external: true
        =============================
        Now here if you notice, we have mentioned external: true for secret psql_password, because here we are precreating the secrets either
        by using the cli command of docker secret create or by using some API call at application side, but in both cases, secret will be
        pre created and by looking at this external: true, swarm will skip creating the secret at the time of building stack and use the
        existing one, and will throw error if it does not pre exist.
    d) but we will stick to the first once for this example.
    e) In case of complex compose file with multiple service, all services may have different secrets and for that we will define them at the
        bottom first by using secrets: key and then assign them to the services.
    f) there are basicaly two ways of assinging the secrets to services inside stack compose :
        i) short hand method: which we are using in this example
        ii) Long form method: This allows us to mention things like permissions, and the users that are allowed to access using those standard
            linux mode and user ID syntax.
            So if you are running application as a non root user, you may want to target these secrets to only a specific user rather then
            to all
6) Now let's replicate all the files in our local workstation under secrets-sample-2/ into our swarm mode "node1" under 
    node1:
        # pwd : /home/docker
        # vi psql_user.txt
            dbuser
        # vi psql_password.txt
            brDSLsd
        # vi docker-compose.yml
        # ls 
            psql_password.txt  psql_user.txt     docker-compose.yml
        # docker stack deploy -c docker-compose.yml mydb
            Creating network mydb_default
            Creating secret mydb_psql_user
            Creating secret mydb_psql_password
            Creating service mydb_psql
        So we can clearly see that first the default overlay network is created and will be named as mydb_default
        # docker network ls 
            g39036jrzwyl        mydb_default        overlay             swarm
        Then it will create the secrets: 
        # docker secret ls
            ID                          NAME                 DRIVER              CREATED              UPDATED
            6rnwr00s96w84vu3lophqa2ig   mydb_psql_password                       About a minute ago   About a minute ago
            j3c7d7ooiesl175cbvweb6z68   mydb_psql_user                           About a minute ago   About a minute ago
        again notice that the names of secrets are having stack name in front
        # docker stack ls
            NAME                SERVICES            ORCHESTRATOR
            mydb                1                   Swarm
        # docker stack services mydb
            ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
            9y38yr02o6kf        mydb_psql           replicated          1/1                 postgres:latest
        # docker stack ps mydb
            ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
            neb3thpdz8i2        mydb_psql.1         postgres:latest     node2               Running             Running 5 minutes ago
        So it has again started at node2
7) And if after deploying this stack if we login to the container that is deployed on node2 we will again find the secrets under /run/secrets
8) Good thing with stack is that we could remove everything related to that stack by just using stack rm command
    # docker stack rm mydb
        Removing service mydb_psql
        Removing secret mydb_psql_password
        Removing secret mydb_psql_user
        Removing network mydb_default




        