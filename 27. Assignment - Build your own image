1) So here we are going to dockerize one of the pre build node.js application.
2) the source code and required files are kept in the assignment folder.
    refer ==> dockerfile-assignment-1/
3) Instruction to be followed for this project:
    a) This dir(dockerfile-assignment-1/) contains a Node.js app, you need to get it running in a container. No modifications to the app should be necessary, 
        only edit this Dockerfile.
    b) Overview of this assignment
        use the instructions from developer below to create a working Dockerfile
        once Dockerfile builds correctly, start container locally to make sure it works on http://localhost
        then ensure image is named properly for your Docker Hub account with a new repo name
        push to Docker Hub, then go to https://hub.docker.com and verify
        then remove local image from cache
        then start a new container from your Hub image, and watch how it auto downloads and runs
        test again that it works at http://localhost
    c) Instructions from the app developer
        you should use the 'node' official image, with the alpine 6.x branch
        this app listens on port 3000, but the container should launch on port 80
            so it will respond to http://localhost:80 on your computer
        then it should use alpine package manager to install tini: 'apk add --update tini'
        then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'
        Node uses a "package manager", so it needs to copy in package.json file
        then it needs to run 'npm install' to install dependencies from that file
        to keep it clean and small, run 'npm cache clean --force' after above
        then it needs to copy in all files from current directory
        then it needs to start container with command '/sbin/tini -- node ./bin/www'
        in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands
    d) Bonus Extra Credit
        this will not have you setting up a complete image useful for local development, test, and prod
        it's just meant to get you started with basic Dockerfile concepts and not focus too much on
        proper Node.js use in a container. **If you happen to be a Node.js Developer**, then 
        after you get through more of this course, you should come back and use my 
        Node Docker Good Defaults sample project on GitHub to change this Dockerfile for 
        better local development with more advanced topics
        https://github.com/BretFisher/node-docker-good-defaults
4) So we are going to build up our image based on the Dockerfile in current assignment directory
    refer ==> dockerfile-assignment-1/Dockerfile
    Please refer to Dockerfile for better understanding.
5) Once Dockerfile created, lets run the docker image build command in order to build the image.
    # pwd
        /c/Users/Sagar/projects/Docker_kube_project/dockerfile-assignment-1
    # docker image build -t nodeapp .
    # docker image ls
        REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
        nodeapp                    latest              5b8b60fe53eb        15 minutes ago      118MB 
6) Then spin up a container using this image
    # docker container run -p 80:3000 --rm nodeapp
    # docker container ls
        CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
        d33d3df47b20        nodeapp             "docker-entrypoint.s"   15 minutes ago      Up 5 minutes        0.0.0.0:80->3000/tcp   peaceful_hermann
7) Now lets change the repo name of this new image created and make it ready to upload it ti docker hub
    # docker container stop d33d3df47b20
    # docker image tag nodeapp:latest sagshar5/nodeapp:latest
    # docker image ls
        REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
        sagshar5/nodeapp           latest              5b8b60fe53eb        27 minutes ago      118MB
    # docker push sagshar5/nodeapp nodeapp
    check the image now on docker hub and delete it from the local repo
    # docker image rm sagshar5/nodeapp
8) once we have uploaded the image to docker hub as above and deleted from our local repo, lets try to run the container again with the image
    on docker hub
    # docker container run -p 80:3000 --rm --name webapp sagshar5/nodeapp
    and once again the container started with the image from docker hub
    then again on browser:  http://docker.engine:80
